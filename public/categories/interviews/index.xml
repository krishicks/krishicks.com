<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interviews on krishicks.com</title>
    <link>http://www.krishicks.com/categories/interviews/index.xml</link>
    <description>Recent content in Interviews on krishicks.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.krishicks.com/categories/interviews/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Phone Interviews are Useless</title>
      <link>http://www.krishicks.com/post/phone-interviews/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.krishicks.com/post/phone-interviews/</guid>
      <description>&lt;p&gt;&lt;em&gt;See discussion about this post on &lt;a href=&#34;https://news.ycombinator.com/item?id=9111310&#34;&gt;Hacker News&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yesterday, I did a coding challenge-based phone interview. When it ended, I had a mini retrospective with myself, and thought about what went well, and what didn&amp;rsquo;t go well.&lt;/p&gt;

&lt;p&gt;Mostly, it didn&amp;rsquo;t go well.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I dislike coding challenges, and interviews that are based around them. As soon as the coding challenge begins, my heartrate jumps and my stress levels rise. It&amp;rsquo;s like being put on stage.&lt;/p&gt;

&lt;p&gt;Often, when doing a coding challenge, I make silly mistakes and find myself forgetting to use idioms. It&amp;rsquo;s only after the interview is over and I&amp;rsquo;ve relaxed a bit that I realize what my errors were and where I deviated from how I&amp;rsquo;d write code normally, and rewrite the code to my usual standard. But at that point the interview&amp;rsquo;s over, and I&amp;rsquo;ve already lost.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m similarly bad at whiteboard coding. I don&amp;rsquo;t ever do it outside of interviews, and I rarely do interviews. I avoided interviewing at Twitter for a long time because I was sure I wouldn&amp;rsquo;t get through the interview process, which I knew to consist of both a phone interview and whiteboard coding. After a couple of my friends joined and I had a chat with an engineering manager there, I figured I&amp;rsquo;d give it a shot. If anything, it&amp;rsquo;d be practice for interviewing, which I&amp;rsquo;m terrible at.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t get past the phone interview.&lt;/p&gt;

&lt;p&gt;Most of the reason I&amp;rsquo;m so bad at coding challenge-based phone interviews and whiteboard coding is I have very low confidence in them as effective tools for interviewing.&lt;/p&gt;

&lt;p&gt;Coding challenges done over the phone will select for people who are good at doing coding challenges over the phone.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s probably the case that people who use coding challenges over the phone as a tool for interviewing feel differently than me about them. This was illustrated when I had the aforementioned chat with the engineering manager at Twitter. He applied the same low value to coding challenges as me, but knew he&amp;rsquo;d have to go through them to get the job. So he bought and read “Cracking the Coding Interview” to fill his developer toolbox with tools he doesn&amp;rsquo;t usually use, and wouldn&amp;rsquo;t expect to use in the position he was interviewing for, because the interview process expected it of him. He jumped through the hoops because everyone else jumped through the same hoops, and doing that particular bit of acrobatics was what everyone else wanted from their new hires. Sure, someone might be a great developer in their own right, but &lt;em&gt;can they jump through the hoops?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At Pivotal, the gating portion of the interview is done differently from any other place I&amp;rsquo;ve interviewed at. The interview begins with, instead of a coding challenge, a TDD challenge: the interviewee is presented with a few failing tests for a reasonably simple problem, sitting side by side (&lt;em&gt;pairing&lt;/em&gt;) with the interviewer in a typical work environment. The interviewee explains what kind of code they&amp;rsquo;d write to pass each test, and the interviewer does the typing. When all the tests pass, the interviewee gets to add new tests of their own, since there are certain tests that are missing (by design). This system allows the candidate to get a good idea of what they&amp;rsquo;d be doing day-to-day (pairing, TDD) in a realistic work environment. It also allows the interviewer to get a better idea of how the candidate approaches problem-solving.&lt;/p&gt;

&lt;p&gt;When I was interviewing for my replacement at DaisyBill, I opted for a similar approach. I took an actual production feature I developed, copied a subset of the tests I wrote for the feature, and left a shell of the implementation for the interviewee to use as a starting point. This made for a repeatable, real-world-based, effective interview.&lt;/p&gt;

&lt;p&gt;For more reading on effective interview processes, I recommend reading about &lt;a href=&#34;http://ejohn.org/blog/project-based-interviews&#34;&gt;Project-Based Interviews&lt;/a&gt; and &lt;a href=&#34;https://github.com/blog/1269-the-github-hiring-experience&#34;&gt;The GitHub Hiring Experience&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>