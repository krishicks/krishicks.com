<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kris Hicks</title>
    <link>/post/</link>
    <description>Recent content in Posts on Kris Hicks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Kris Hicks 2012-2020</copyright>
    <lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Buying a Car From Shift Was a Huge Mistake</title>
      <link>/post/buying-a-car-from-shift/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/buying-a-car-from-shift/</guid>
      <description>I decided to sell my 2012 MINI Cooper S and replace it with a Subaru WRX of the 2008-2014 vintage. The same week I sold the MINI I found a WRX for sale on Shift in Los Angeles. I decided to fly down from San Francisco to Los Angeles to test drive and, assuming everything went well, buy it. Every step of the purchase has been a disaster.
The Search As much as I liked my MINI Cooper S, I was growing a bit tired of FWD and wanted to get something with RWD or AWD.</description>
    </item>
    
    <item>
      <title>Migrating Concourse Resources to S3</title>
      <link>/post/migrating-concourse-resources-to-s3/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/migrating-concourse-resources-to-s3/</guid>
      <description>One of the great things about Concourse is the resource abstraction it gives you for defining inputs and outputs to jobs in a pipeline. This abstraction allows you to redefine a resource while leaving the job that uses the resource unmodified. For example, if I have a resource, my-source-code, that normally is provided via a git resource:
resources:-name:my-source-codetype:gitsource:uri:git@example.com/some-owner/some-repo.gitI can change that resource to be provided by S3 instead by changing the resource definition:</description>
    </item>
    
    <item>
      <title>Felix Gray vs. GUNNAR Optiks</title>
      <link>/post/felix_gray/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/felix_gray/</guid>
      <description>f.lux Back in 2012 or so I came across some software that was meant to reduce eye strain when looking at a computer screen, f.lux. The makers of that software claimed that, by blocking blue light in sync with the setting of the sun, it would allow you to sleep better as viewing blue light disrupts the sleep cycle.
I tried it out and decided I liked the effect; I didn&#39;t do a scientific study to determine whether my sleep habits were improved, but I did notice I found screens far more pleasant to view at night than without running f.</description>
    </item>
    
    <item>
      <title>Burnout</title>
      <link>/post/burnout/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/burnout/</guid>
      <description>This is a post about me being taking on too much responsibility and not doing enough to reduce it when I started to crack. I realized somewhat early on that I had taken on too much, but I didn&#39;t see any way to offload the work while continuing to develop products at the pace I&#39;d maintained.
In January 2017 I joined a new team at Pivotal.
Due to a variety of factors, I ended up taking on additional roles on top of my role as software engineer.</description>
    </item>
    
    <item>
      <title>Experience Report: Viral Meningitis</title>
      <link>/post/viral-meningitis/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/viral-meningitis/</guid>
      <description>A few weeks ago I experienced some mild stomach cramps that reminded me of food poisoning at the beginning of the week. As the week dragged on the stomach cramps came and went. I figured it was just mild food poisoning, and it&#39;d be gone soon enough. I chewed some bismuth subsalicylate tablets and didn&#39;t think too much more about it.
At the end of the week there was a small bit of lethargy that I experienced, enough to make me go home early from work.</description>
    </item>
    
    <item>
      <title>Thoughts on Pipeline Design with Concourse</title>
      <link>/post/pipeline-design-with-concourse/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/pipeline-design-with-concourse/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;image-container&#34;&gt;&lt;span class=&#34;link&#34;&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; 
  href=&#34;http://www.krishicks.com/goulash-pipeline.png&#34;&gt;&lt;img class=&#34;img&#34; src=&#34;http://www.krishicks.com/goulash-pipeline.png&#34;
        alt=&#34;Goulash Pipeline&#34;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;caption&#34;&gt;&lt;span class=&#34;title&#34;&gt;Goulash Pipeline in Concourse&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently made a CI/CD pipeline in &lt;a href=&#34;https://concourse.ci&#34;target=&#34;_blank&#34;&gt;Concourse&lt;/a&gt; for deploying &lt;a href=&#34;https://github.com/pivotalservices/goulash/&#34;target=&#34;_blank&#34;&gt;Goulash&lt;/a&gt;. The pipeline definition can be found &lt;a href=&#34;https://github.com/pivotalservices/goulash/blob/master/ci/pipeline.yml&#34;target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Figuring out how to split up the work your pipeline needs to do in jobs and tasks in Concourse is not always obvious. The way you define jobs and tasks will determine how repeatable steps in your pipeline are, how fast jobs run, and how easily you can debug tasks.&lt;/p&gt;
&lt;p&gt;In this post I will describe how I came to the job and task definitions in the pipeline for Goulash.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notifications and Work</title>
      <link>/post/notifications/</link>
      <pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/notifications/</guid>
      <description>&lt;p&gt;Call me old-fashioned.&lt;/p&gt;
&lt;p&gt;Before I started writing software I worked a variety of jobs. I bagged groceries, received calls at an answering service, stocked shelves at an electronics retailer, did data entry at a tool coating company, and took phone orders for office supplies, to name a few.&lt;/p&gt;
&lt;p&gt;Each of these jobs had two things in common: if you were late it was notable, and when you were at work, you &lt;em&gt;worked&lt;/em&gt;. Being habitually late and taking personal calls at all hours of the day was looked down upon, and could lead to termination. If you wanted to take a call, you&#39;d likely have to wait to do it on your break.&lt;/p&gt;
&lt;p&gt;The jobs I held prior to writing software helped build my work ethic: I strive to always be early, and I come to work to &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I have noticed in the past few years that this work ethic is not shared by many of my peers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>There is Always a Better Way</title>
      <link>/post/there-is-always-a-better-way/</link>
      <pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/there-is-always-a-better-way/</guid>
      <description>&lt;p&gt;I got into software development because of a single idea: there is always a better way.&lt;/p&gt;
&lt;p&gt;I was working at a title insurance company in the US during the housing boom of 2007. I was hired as a temp to do data entry for the calculation of fees associated with purchasing &lt;a href=&#34;https://en.wikipedia.org/wiki/Title_insurance&#34;target=&#34;_blank&#34;&gt;title insurance&lt;/a&gt;. It was a straightforward job, with one incredible hindrance: everyone was using adding machines, which is a fancy desktop calculator that prints out a receipt as you enter calculations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using gRPC with Mutual TLS in Golang</title>
      <link>/post/grpc-mutual-tls-golang/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/grpc-mutual-tls-golang/</guid>
      <description>&lt;p&gt;So, you want to use &lt;a href=&#34;http://www.grpc.io&#34;target=&#34;_blank&#34;&gt;gRPC&lt;/a&gt;. Cool! And you want to use
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mutual_authentication&#34;target=&#34;_blank&#34;&gt;mutual TLS&lt;/a&gt;, too. But
maybe, like me, you couldn&#39;t easily figure out how to accomplish this, given
the documentation and examples out there. Here&#39;s how I did it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes on Forza 6</title>
      <link>/post/forza-6/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/forza-6/</guid>
      <description>&lt;p&gt;Here are some notes about Forza 6:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KetoSoy</title>
      <link>/post/ketosoy/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/ketosoy/</guid>
      <description>&lt;p&gt;I&#39;ve been consuming &lt;a href=&#34;http://www.ketosoy.com&#34;target=&#34;_blank&#34;&gt;KetoSoy&lt;/a&gt; for about a month now.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using git subtree with gh-pages</title>
      <link>/post/subtree-gh-pages/</link>
      <pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/subtree-gh-pages/</guid>
      <description>&lt;p&gt;I recently switched to using &lt;a href=&#34;http://www.gohugo.io&#34;target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; to generate this site and needed a strategy to publish it. Previously I was using &lt;a href=&#34;http://www.octopress.org&#34;target=&#34;_blank&#34;&gt;Octopress&lt;/a&gt; which has scripts for managing the gh-pages branch automatically. The documentation on gohugo.io shows a workflow that uses &lt;code&gt;git subtree&lt;/code&gt;, a tool I knew about but had never actually used before. I found the &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog#configure-git-workflow:fcefb200141ace3e7bfd6542457b7a72&#34;target=&#34;_blank&#34;&gt;tutorial&lt;/a&gt; on the gohugo.io page to be confusing. Here, I describe the approach I used instead.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phone Interviews are Useless</title>
      <link>/post/phone-interviews/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/phone-interviews/</guid>
      <description>&lt;p&gt;&lt;em&gt;See discussion about this post on &lt;a href=&#34;https://news.ycombinator.com/item?id=9111310&#34;target=&#34;_blank&#34;&gt;Hacker News&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yesterday, I did a coding challenge-based phone interview. When it ended, I had a mini retrospective with myself, and thought about what went well, and what didn&#39;t go well.&lt;/p&gt;
&lt;p&gt;Mostly, it didn&#39;t go well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Consulting</title>
      <link>/post/on-consulting/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/on-consulting/</guid>
      <description>&lt;p&gt;After four years being a consultant I jumped ship and joined a startup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to set up a Clojure dev environment on Snow Leopard</title>
      <link>/post/how-to-set-up-a-clojure-dev-environment-on-snow-leopard/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-set-up-a-clojure-dev-environment-on-snow-leopard/</guid>
      <description>&lt;h3 id=&#34;homebrew-package-manager&#34;&gt;Homebrew (package manager)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSkL raw.github.com/mxcl/homebrew/go)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More information on Homebrew can be found on the &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;title=&#34;Homebrew home page&#34;target=&#34;_blank&#34;&gt;Homebrew home page&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rewinding git pull</title>
      <link>/post/rewinding-git-pull/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/rewinding-git-pull/</guid>
      <description>&lt;p&gt;If you&#39;re using a rebase strategy for the first time you may run &lt;code&gt;git pull&lt;/code&gt; in a situation where Git practically tells you to do it, but you don&#39;t actually want to do it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git quick tips</title>
      <link>/post/quick-tips/</link>
      <pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/quick-tips/</guid>
      <description>&lt;p&gt;The following are things I found very helpful, which you also may find make your day-to-day usage of Git more enjoyable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rewinding git commit --amend</title>
      <link>/post/rewinding-git-commit-amend/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/rewinding-git-commit-amend/</guid>
      <description>&lt;p&gt;It may come to pass that you will run &lt;code&gt;git commit --amend&lt;/code&gt; by mistake. When this happens, you&#39;ll want to unwind the operation you just did.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rerere</title>
      <link>/post/rerere/</link>
      <pubDate>Wed, 13 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/rerere/</guid>
      <description>&lt;p&gt;There have been times where I performed a rebase and had to resolve conflicts as part of the rebase, and then decided to abort the rebase for one reason or another.&lt;/p&gt;
&lt;p&gt;Without &lt;code&gt;rerere&lt;/code&gt; the next time I went to perform the rebase I&#39;d end up having to resolve at least some of the same conflicts I had previously, which is annoying.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;rerere&lt;/code&gt; comes in.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git rebase --onto</title>
      <link>/post/git-rebase-onto/</link>
      <pubDate>Mon, 28 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/git-rebase-onto/</guid>
      <description>&lt;p&gt;Have you ever dug into the &lt;code&gt;git rebase&lt;/code&gt; documentation and noticed there&#39;s a three-argument form of it?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git add -e</title>
      <link>/post/git-add-e/</link>
      <pubDate>Mon, 21 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/git-add-e/</guid>
      <description>&lt;p&gt;&lt;code&gt;git add -e&lt;/code&gt; is like &lt;code&gt;git add -p&lt;/code&gt;, except instead of adding things at the hunk level, you edit the entire patch at once.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git reset -p</title>
      <link>/post/git-reset-p/</link>
      <pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/git-reset-p/</guid>
      <description>&lt;p&gt;I&#39;ve been using &lt;code&gt;git reset -p&lt;/code&gt; a lot recently and I think it makes sense to clarify what it is that it does because when I first started using it I found it a little confusing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git exec</title>
      <link>/post/exec/</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/exec/</guid>
      <description>&lt;p&gt;(Update #1 below)&lt;/p&gt;
&lt;p&gt;Say you&#39;re going to do an interactive rebase where you&#39;re going to be squashing commits or reordering them. During this process you may want Git to execute a command after applying certain items of the todo list. An example of this would be when you want to run &lt;code&gt;rake&lt;/code&gt; or similar to ensure a newly-squashed commit is still green.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>